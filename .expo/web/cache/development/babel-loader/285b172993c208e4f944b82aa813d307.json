{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Date_T from \"../components/Date_T\";\nimport Weather_S from \"../components/Weather_S\";\n\nvar img = require(\"../assets/earth.jpg\");\n\nexport function Weather() {\n  var _useState = useState({\n    \"tempCurrent\": \"\",\n    \"tempNight\": \"\",\n    \"tempDay\": \"\",\n    \"weekDay\": \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  var API_KEY = \"0c64ce6520aa5e1266a4fd6da8b42c72\";\n  useEffect(function () {\n    navigator.geolocation.getCurrentPosition(function (success) {\n      var _success$coords = success.coords,\n          latitude = _success$coords.latitude,\n          longitude = _success$coords.longitude;\n      fetchDataFromApi(latitude, longitude);\n    });\n  }, []);\n\n  function fetchDataFromApi(latitude, longitude) {\n    fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\" + latitude + \"&lon=\" + longitude + \"&exclude=hourly,minutely&units=metric&appid=\" + API_KEY).then(function (res) {\n      return res.json();\n    }).then(function (data) {\n      var unix_timestamp = data.current.dt;\n      var date = new Date(unix_timestamp * 1000);\n      var daily = data.daily;\n\n      for (var _iterator = _createForOfIteratorHelperLoose(daily), _step; !(_step = _iterator()).done;) {\n        var item = _step.value;\n\n        var _date = new Date(item.dt * 1000);\n\n        console.log(weekDays[_date.getDay()] + \" \" + Math.ceil(item.temp.day));\n      }\n\n      setWeather({\n        \"tempCurrent\": data.current.temp,\n        \"tempNight\": data.daily[0].temp.night,\n        \"tempDay\": data.daily[0].temp.day,\n        \"weekDay\": weekDays[date.getDay()]\n      });\n    });\n  }\n\n  ;\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(ImageBackground, {\n    source: img,\n    style: styles.image\n  }, React.createElement(Date_T, null), React.createElement(Text, {\n    style: styles.currentTemp\n  }, Math.ceil(weather.tempCurrent), \"\\xB0C\"), React.createElement(Weather_S, {\n    weather: weather\n  }), React.createElement(View, {\n    style: styles.cities\n  }, React.createElement(Button, {\n    title: \"Tbilisi\",\n    onPress: function onPress() {\n      return fetchDataFromApi(\"41.6941\", \"44.8337\");\n    }\n  }), React.createElement(Button, {\n    title: \"Kutaisi\",\n    onPress: function onPress() {\n      return fetchDataFromApi(\"42.2496\", \"42.6997\");\n    }\n  }), React.createElement(Button, {\n    title: \"Batumi\",\n    onPress: function onPress() {\n      return fetchDataFromApi(\"41.6416\", \"41.6359\");\n    }\n  }))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  image: {\n    flex: 1,\n    resizeMode: \"cover\",\n    justifyContent: \"center\"\n  },\n  cities: {\n    color: \"white\",\n    backgroundColor: \"#3c3c44\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    margin: 20\n  },\n  currentTemp: {\n    fontSize: 30,\n    color: \"white\",\n    textAlign: \"center\",\n    marginBottom: 300\n  }\n});","map":{"version":3,"sources":["E:/SWEEFT/working/Tengo/Screens/Weather.js"],"names":["StatusBar","React","useEffect","useState","Date_T","Weather_S","img","require","Weather","weather","setWeather","weekDays","API_KEY","navigator","geolocation","getCurrentPosition","success","coords","latitude","longitude","fetchDataFromApi","fetch","then","res","json","data","unix_timestamp","current","dt","date","Date","daily","item","console","log","getDay","Math","ceil","temp","day","night","styles","container","image","currentTemp","tempCurrent","cities","StyleSheet","create","flex","resizeMode","justifyContent","color","backgroundColor","flexDirection","margin","fontSize","textAlign","marginBottom"],"mappings":"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","sourcesContent":["import { StatusBar } from \"expo-status-bar\";\nimport React, { useEffect, useState } from \"react\";\nimport { StyleSheet, Text, View, ImageBackground, Button, TouchableOpacity } from \"react-native\";\nimport { SafeAreaView } from \"react-native\";\n\nimport Date_T from \"../components/Date_T\";\nimport Weather_S from \"../components/Weather_S\";\n\nconst img = require(\"../assets/earth.jpg\");\nexport function Weather() {\n    const [weather, setWeather] = useState({\n        \"tempCurrent\": \"\",\n        \"tempNight\": \"\",\n        \"tempDay\": \"\",\n        \"weekDay\": \"\"\n    });\n\n    const weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    const API_KEY = \"0c64ce6520aa5e1266a4fd6da8b42c72\"\n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition((success) => {\n            let { latitude, longitude } = success.coords;\n            fetchDataFromApi(latitude, longitude);\n        });\n    }, []);\n\n    function fetchDataFromApi(latitude, longitude) {\n        fetch(\n            `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude=hourly,minutely&units=metric&appid=${API_KEY}`\n        )\n            .then((res) => res.json())\n            .then((data) => {\n\n                let unix_timestamp = data.current.dt\n                var date = new Date(unix_timestamp * 1000)\n\n                let daily = data.daily\n\n                for (const item of daily) {\n                    let date = new Date(item.dt * 1000)\n                    console.log(weekDays[date.getDay()] + \" \" + Math.ceil(item.temp.day))\n                }\n\n\n\n                setWeather({\n                    \"tempCurrent\": data.current.temp,\n                    \"tempNight\": data.daily[0].temp.night,\n                    \"tempDay\": data.daily[0].temp.day,\n                    \"weekDay\": weekDays[date.getDay()]\n                })\n            });\n    };\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ImageBackground source={img} style={styles.image}>\n                <Date_T />\n\n                <Text style={styles.currentTemp}>{Math.ceil(weather.tempCurrent)}°C</Text>\n\n                <Weather_S weather={weather} />\n                <View style={styles.cities}>\n                    <Button title=\"Tbilisi\" onPress={() => fetchDataFromApi(\"41.6941\", \"44.8337\")}></Button>\n                    <Button title=\"Kutaisi\" onPress={() => fetchDataFromApi(\"42.2496\", \"42.6997\")}></Button>\n                    <Button title=\"Batumi\" onPress={() => fetchDataFromApi(\"41.6416\", \"41.6359\")}></Button>\n                </View>\n\n            </ImageBackground>\n        </SafeAreaView>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    image: {\n        flex: 1,\n        resizeMode: \"cover\",\n        justifyContent: \"center\",\n    },\n    cities: {\n        color: \"white\",\n        backgroundColor: \"#3c3c44\",\n        flexDirection: \"row\",\n        justifyContent: \"space-evenly\",\n\n        margin: 20\n    },\n    currentTemp: {\n        fontSize: 30,\n        color: \"white\",\n        textAlign: \"center\",\n        marginBottom: 300\n    }\n});"]},"metadata":{},"sourceType":"module"}